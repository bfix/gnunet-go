
########################################################################
1. Establishing a GNUnet session between two peers
########################################################################

A session between two GNUnet peers enables the exchange of P2P messages
between them. A session is a wrapper around two uni-directional channels
(A -> B, B -> A) that in theory can even utilize two distinct transport
mechanisms (e.g. UDP and HTTPS).

The most common (and reliable) transport mechanism is TCP/IP that has
the additional advantage of being bi-directional - it bundles channel
and back-channel into a single transport. The following sections will
describe how a TCP-based session between to peers A (initiator) and B
(target) is established.

After negotiating the session and a shared session key, the exchange of
messages between A and B will be encrypted with forward secrecy (see
chapter "Crypto" for more details).


========================================================================
1.1. Pre-Requisites
========================================================================

Each peer has a unique peer ID that is the public key of the long-term
EdDSA signing key (see chapter "Crypto" for details). It is represented
as a 32 byte binary.

Each peer also has a list of end-points that can be used by other peers
to connect to it. An end-point specifies the transport protocol (e.g.
TCP) and an address (e.g. an IPv4 or IPv6 address and a port). The
format of an address is of course dependent on the transport protocol;
an HTTPS transport for example requires an URL address.

We assume that the initiator A of a session knows how to connect to an
address on target B. The bootstrap is usually done by hard-coding a
single, reliable and available GNUnet peer identity and its addresses.
Every peer participating in the network will "learn" about more peers
and their addresses later in the process.


========================================================================
1.2. GNUnet message format
========================================================================

The communication between two peers is based on GNUnet messages. An
individual GNUnet message cannot exceed the size of 64kB; it has at
least a size of 4 bytes (just a header with an empty payload).

All GNUnet messages have a standard header of the following form:

+--------+------------------+------------------------------------------+
| Field  | Size / type      | Comment                                  |
+--------+------------------+------------------------------------------+
| size   | 2 / uint16 (nbo) | Total length of message (incl. size)     |
+--------+------------------+------------------------------------------+
| type   | 2 / uint16 (nbo) | GNUnet message type                      |
+--------+------------------+------------------------------------------+

The annotation "(nbo)" indicates "network-byte order"; integers of that
kind are stored in "big-endian" format (MSB first) in the message body.

The field types used in messages are mostly self-explanatory and are used
in nearly all programming languages. The following field types need an
explanation:

	string		a sequence of 8-bit characters delimited by '\0'
				(C/C++ character string)

	time		uint64 value of the number of microseconds since
				midnight Jan 1st, 1970 (Unix epoch in usec)

	address		uint8 array of variable length (with no terminator)
				The internal structure of an address depends on the
				transport protocol used (TCP and UDP addresses for
				example are composed of a 4 (IPv4) or 16 (IPv6) uint8
				array followed by the port as uint16 (nbo)). 


========================================================================
1.3. Establishing a session between peers (TCP connection)
========================================================================

Peer A (initiator) establishes a TCP connection to an address of peer B.
After the TCP/IP connection is built, peer A starts the message exchange
to establish a GNUnet session with the other peer.


------------------------------------------------------------------------
1.3.1. Exchange TRANSPORT_TCP_WELCOME messages
------------------------------------------------------------------------

Peer A sends a TRANSPORT_TCP_WELCOME message to peer B, so that peer B
can learn the peer identity of the initiating peer:

+-----------------------------------------------------------------------+
| TRANSPORT_TCP_WELCOME                                                 |
+---------+------------------+------------------------------------------+
| Field   | Size / type      | Comment                                  |
+---------+------------------+------------------------------------------+
| size    | 2 / uint16 (nbo) | Total length of message (incl. size)     |
+---------+------------------+------------------------------------------+
| type    | 2 / uint16 (nbo) | TRANSPORT_TCP_WELCOME (61)               |
+---------+------------------+------------------------------------------+
| peer_id | 32               | Peer ID of sender (A)                    |
+---------+------------------+------------------------------------------+


Peer B replies with a TRANSPORT_TCP_WELCOME message, so that peer A can
check it is talking to the correct target peer B (and terminate the TCP
connection if that is not the case).

Peer B can also send a TRANSPORT_SESSION_QUOTA message to inform peer A
about a the maximum bandwidth it has assigned to this session. Only rogue
peers ignore this request:

+-----------------------------------------------------------------------+
| TRANSPORT_SESSION_QUOTA                                               |
+---------+------------------+------------------------------------------+
| Field   | Size / type      | Comment                                  |
+---------+------------------+------------------------------------------+
| size    | 2 / uint16 (nbo) | Total length of message (incl. size)     |
+---------+------------------+------------------------------------------+
| quota   | 4 / uint32 (nbo) | Assigned bandwith to session (B/s)       |
+---------+------------------+------------------------------------------+


Peer B can also send a TRANSPORT_SESSION_SYN message to 


EXAMPLE:
--------

A --> B		00:24:00:3d:d3:b3:ac:f3:85:0e:cc:df:82:dd:fe:45
			03:08:71:8c:51:aa:e6:52:bf:b6:30:e5:17:13:79:dd
			01:bc:89:56

	= TcpWelcomeMsg{'TESTSWW51V6DZ0PXZS2G623HHH8TNSJJQYV31S8Q2DWXT0DWH5B0'}

B --> A		00:24:00:3d:92:dc:bf:39:40:2d:c6:3c:97:a6:81:e0
			fc:d8:7c:74:17:d3:a3:8c:52:fd:e0:49:bc:d0:1c:0a
			0b:8c:02:51

	= TcpWelcomeMsg{'JBEBYEA05Q33S5X6G7GFSP3WEGBX78WCABYY0JDWT0E0M2WC098G'}

B --> A		00:08:01:7b:ff:ff:ff:ff

	= SessionQuotaMsg{4.000GB/s}


------------------------------------------------------------------------
1.3.2. Send HELLO message
------------------------------------------------------------------------


------------------------------------------------------------------------
1.3.2. Send HELLO message
------------------------------------------------------------------------

Peer A sends a HELLO message to peer B to announce its peer identity
and its list of available end-points (list of 0 or more HELLOADDR blocks):

+----------------------------------------------------------------------------+
| HELLO                                                                      |
+-------------+-------------------+------------------------------------------+
| Field       | Size / type       | Comment                                  |
+-------------+-------------------+------------------------------------------+
| size        | 2 / uint16 (nbo)  | Total length of message (incl. size)     |
+-------------+-------------------+------------------------------------------+
| type        | 2 / uint16 (nbo)  | HELLO (17)                               |
+-------------+-------------------+------------------------------------------+
| friend_only | 32 / uint32 (nbo) | =1: don't gossip HELLO                   |
+-------------+-------------------+------------------------------------------+
| peer_id     | 32                | Peer ID of sender                        |
+-------------+-------------------+------------------------------------------+
| addr_list   | * / []HELLOADDR   | List of HELLO addresses (can be empty)   |
+-------------+-------------------+------------------------------------------+

The field 'friend_only' is either 0 (=NO) or 1 (=YES) and specifies if the
receiving peer may gossip this HELLO message to other peers (see section
"GOSSIP Protocol" for details).

As mentioned earlier, Peer B could build a separate back-channel to peer
A for a GNUnet connection although that is not necessary for our TCP
connection which is bi-directional. In this case (TCP), the HELLO message
may contain no end-point specifications (address_list is empty):

If the HELLO message contains HELLOADDR blocks, these have the following
format:

+----------------------------------------------------------------------------+
| HELLOADDR                                                                  |
+-------------+-------------------+------------------------------------------+
| Field       | Size / type       | Comment                                  |
+-------------+-------------------+------------------------------------------+
| transport   | * / string        | Name of transport                        |
+-------------+-------------------+------------------------------------------+
| addr_size   | 2 / uint16 (nbo)  | Size of address entry                    |
+-------------+-------------------+------------------------------------------+
| expire_on   | 8 / time (nbo)    | Expiration date                          |
+-------------+-------------------+------------------------------------------+
| address     | * / address       | Address specification (addr_size bytes)  |
+-------------+-------------------+------------------------------------------+

Peers should persistently store received HELLO messages (until the addresses
contained in it expire).

EXAMPLE:
--------

==> 00:3a:00:11:00:00:00:00:d3:b3:ac:f3:85:0e:cc:df
	82:dd:fe:45:03:08:71:8c:51:aa:e6:52:bf:b6:30:e5
	17:13:79:dd:01:bc:89:56:74:63:70:00:00:04:00:05
	70:c2:6b:b0:cc:92:ac:11:00:07

	= HelloMsg{TESTSWW51V6DZ0PXZS2G623HHH8TNSJJQYV31S8Q2DWXT0DWH5B0,
				0,[Address{tcp:172.17.0.7,2018-07-12T00:26:56.000434Z}]}


------------------------------------------------------------------------
1.3.2. PING/PONG handshake
------------------------------------------------------------------------

Peer A sends a TRANSPORT_PING message to Peer B:

+----------------------------------------------------------------------------+
| TRANSPORT_PING                                                             |
+-------------+-------------------+------------------------------------------+
| Field       | Size / type       | Comment                                  |
+-------------+-------------------+------------------------------------------+
| size        | 2 / uint16 (nbo)  | Total length of message (incl. size)     |
+-------------+-------------------+------------------------------------------+
| type        | 2 / uint16 (nbo)  | TRANSPORT_PING (372)                     |
+-------------+-------------------+------------------------------------------+
| challenge   | 4 / uint32        | Challenge code (to ensure fresh reply)   |
+-------------+-------------------+------------------------------------------+
| target_id   | 32                | Peer ID of target peer                   |
+-------------+-------------------+------------------------------------------+
| addr        | * / address       | Address on target peer                   |
+-------------+-------------------+------------------------------------------+


Example
==> 00:36:01:74:54:94:ab:a1:92:dc:bf:39:40:2d:c6:3c
	97:a6:81:e0:fc:d8:7c:74:17:d3:a3:8c:52:fd:e0:49
	bc:d0:1c:0a:0b:8c:02:51:74:63:70:00:00:00:00:00
	ac:11:00:05:08:26

	= PingMsg{JBEBYEA05Q33S5X6G7GFSP3WEGBX78WCABYY0JDWT0E0M2WC098G,
			  Address{tcp:172.17.0.5:2086},2712376404}



<== SessionQuotaMsg{4.000GB/s}
    [0008017bffffffff]
<== SessionSyn{2018-07-11T12:26:56.000763Z}
    [0010017700000000000570b85cc51ddb]
==> SessionSynAck{2018-07-11T12:26:56.000763Z}
    [0010017800000000000570b85cc51ddb]
<== PongMsg{?,Address{tcp:172.17.0.5:2086},2712376404}
    [006a01755494aba1b044e5b7249257eeb177079b431aff9d225f85e14b28b2a4f2f88ac2412d6425ab58bd7d13d48be43bc7482c23e94c94519c4701ca93af2f0c32631071397f050000002200000001000570b93358c20c0000000e7463700000000000ac1100050826]
*** PONG signature verified
<== SessionAck{}
    [00040179]


========================================================================
1.2. Peer B initiates a connection to Peer A
========================================================================

<== 00:24:00:3d:92:dc:bf:39:40:2d:c6:3c:97:a6:81:e0
	fc:d8:7c:74:17:d3:a3:8c:52:fd:e0:49:bc:d0:1c:0a
	0b:8c:02:51

	= TcpWelcomeMsg{'JBEBYEA05Q33S5X6G7GFSP3WEGBX78WCABYY0JDWT0E0M2WC098G'}

==> 00:24:00:3d:d3:b3:ac:f3:85:0e:cc:df:82:dd:fe:45
	03:08:71:8c:51:aa:e6:52:bf:b6:30:e5:17:13:79:dd
	01:bc:89:56

	= TcpWelcomeMsg{'TESTSWW51V6DZ0PXZS2G623HHH8TNSJJQYV31S8Q2DWXT0DWH5B0'}

<== 00:28:00:11:00:00:00:00:92:dc:bf:39:40:2d:c6:3c
	97:a6:81:e0:fc:d8:7c:74:17:d3:a3:8c:52:fd:e0:49
	bc:d0:1c:0a:0b:8c:02:51

	= HelloMsg{JBEBYEA05Q33S5X6G7GFSP3WEGBX78WCABYY0JDWT0E0M2WC098G,0,[]}

<== PingMsg{TESTSWW51V6DZ0PXZS2G623HHH8TNSJJQYV31S8Q2DWXT0DWH5B0,Address{tcp:172.17.0.7:2086},279093666}
    [00360174a2a1a210d3b3acf3850eccdf82ddfe450308718c51aae652bfb630e5171379dd01bc89567463700000000000ac1100070826]
==> PongMsg{OK,Address{tcp:172.17.0.7:2086},279093666}
 [006a0175a2a1a210537ed664528db72e7903f6c34f8efdeb34597a77f68b1505901b3e1ce45c24337ae00e408dfcf94d5f7caa370241bfbd3bc12dcb0e0d0d9a60d3d662454fd40f0000002200000001000570c20d3fa97e0000000e7463700000000000ac1100070826]
<== SessionQuotaMsg{4.000GB/s}
    [0008017bffffffff]
<== SessionSyn{2018-07-11T12:00:31.000255Z}
    [0010017700000000000570b7fe554827]
==> SessionSynAck{2018-07-11T12:00:31.000255Z}
    [0010017800000000000570b7fe554827]
<== SessionAck{}
    [00040179]
*** CONNECTION etsablished with peer 'JBEBYEA05Q33S5X6G7GFSP3WEGBX78WCABYY0JDWT0E0M2WC098G'






========================================================================
0. Intro
========================================================================

GNUnet makes use of various cryptographic mechanisms (signing, hashing,
encrypting, ...) in various different flavors. This section will shortly
explain these mechanisms:

------------------------------------------------------------------------
0.1. Elliptic Curve Cryptography (ECC)
------------------------------------------------------------------------

Signatures in GNUnet are based on EdDSA [1],[2]. EdDSA is a secure and
fast ECC signature scheme based on the twisted Edwards curve Ed25519. The
private key is a 32 byte seed value (which is used to derive an integer
'd'); the public key is the point '[d]B' where 'B' is the base point of
Curve25519. 

	Used for:	- long-term signing key
				  (persistent, public key is the peer ID)
				- short-term signing key
				  (transient, valid for ~12h)

The key exchange scheme is based on ECDHE with Curve25519 key pairs.




Long-term signing key	EdDSA
Short-term signing key	ECDSA on Ed25519
Key for key exchange	ECDHE on Curve25519
Session key(s)			AES / Twofish



========================================================================
1. Initial setup
========================================================================

------------------------------------------------------------------------
1.1. Long-term signing key
------------------------------------------------------------------------

A peer generates a long-term signing key pair for the EdDSA signature
algorithm with the Ed25519 curve from a random seed. For further details
see the Ed25519 paper [1] and RFC 8032 [2].

------------------------------------------------------------------------
1.2. PeerIdentity
------------------------------------------------------------------------

The PeerIdentity is the public key of the long-term signing key of a
peer. A human-readable representation of the PeerIdentity is a custom
Base32 encoding of the public key (see A.1 for details)

========================================================================
2. Periodically
========================================================================

------------------------------------------------------------------------
2.1. {REKEY_FREQUENCY: 12 hrs} Ephemeral key
------------------------------------------------------------------------

A Peer generates an ephemeral signing key pair for the EdDSA signature
algorithm with the Ed25519 curve from a random seed. It creates a
"CORE_EPHEMERAL_KEY" message (see "CORE protocol") and signs it with the
long-term signing key created in step 1.1

This ephemeral key will be used with the ECDHE key exchange algorithm to
establish session keys for symmetrical encryption between the peers.

========================================================================
3. On demand
========================================================================

------------------------------------------------------------------------
2.1. {on start-up, expiration or change of TRANSPORT protocols}
------------------------------------------------------------------------

The peer constructs a new HELLO message for itself and puts it into the
DHT (see chapter "HELLO" protocol). A HELLO message contains the identity
of the peer and a list of available end-points where the peer accepts
connections from other peers. Each end-point defines an expiration date
(to handle cases where the globally-visible IP address of a peer changes
over time like for DSL clients). The HELLO in URI format looks like:

	gnunet://hello/<peerid>[+<expiration_time>+<proto>+<ip:port>](+)

========================================================================
4. Establishing a channel to a target peer
========================================================================

------------------------------------------------------------------------
4.1. Lookup HELLO of target peer
------------------------------------------------------------------------

The peer looks up the HELLO for a target peer with a known peer identity
from either a local list of "known" peers with non-expired lifetime or
looks up the HELLO message of the target peer in the DHT (see chapter
"HELLO protocol"). It selects (one or more an end-points of the target
peer (see chapter "ATS") for a connection to the target.

------------------------------------------------------------------------
4.2. Connecting to target end-point
------------------------------------------------------------------------

The peer connects to the selected end-point(s) of the target peer thus
establishing a uni-directional (e.g. UDP) or bi-directional (e.g. TCP)
channel to the target.

In case of a uni-directional channel the target will try to establish
a back-channel to the peer as soon as it knows how to do so (usually
after step 4.3.1). For simplification we assume that a bi-directional
message exchange between peer and target exists.

------------------------------------------------------------------------
4.3. HELLO protocol to negotiate session keys for transport 
------------------------------------------------------------------------

The peer 

========================================================================
[5] Message exchange
========================================================================

(1) Services queue messages for a target peer
    - message is processed immediately (if requested by service)
    - (smaller) messages are bundled (max 64k total)
    => raw packet:
        [msg_1][msg_2]...[msg_n]

(2) raw packet is encrypted:
    - AES-GCM (nonce, timestamp {obsolete in future version})
    - Twofish
    => transport packet

========================================================================
[6] Transport
========================================================================

-------------------------------------------------
(1) TCP:
-------------------------------------------------

    - direct message exchange (bi-directional)

-------------------------------------------------
(2) UDP:
-------------------------------------------------

    Each UDP packet has the following structure:
    - peerid of sender (32 bytes)
    { future extension:
      - ephemeral key
      - signature of payload (64 bytes)
      - HMAC (32/64 bytes)
    }
    - payload (up to MTU-header size)

========================================================================
[A] Appendices
========================================================================

------------------------------------------------------------------------
(1) Base32 conversion between binary data and string representation
------------------------------------------------------------------------

A binary array of size m is viewed as a consecutive stream of bits from
left to right. Bytes are ordered with ascending address, while bits (in
a byte) are ordered MSB to LSB.

For encoding the stream is partitioned into 5-bit chunks; the last chunk
is right-padded with 0's if 8*m is not divisible by 5. Each chunk (value
between 0 and 31) is encoded into a character; the mapping for encoding
is the same as in [3].

For decoding each character is converted to a 5-bit chunk based on the
encoder mapping (with one addition: the character 'U' maps to the value
27). The chunks are concatenated to produce a bit stream to be stored
in the output array.

========================================================================
B. Crypto-related constants
========================================================================

-------------------------------------------------
B.1. Signature purpose
-------------------------------------------------

+----------------------------------+-------+--------------------------------------------------------------------+
| Name                             | Value | Comment                                                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_TEST                         |     0 | Only used in test cases!                                           |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_TRANSPORT_PONG_OWN           |     1 | Signature for confirming that this peer uses a particular address. |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_TRANSPORT_DISCONNECT         |     2 | Signature for confirming that this peer intends to disconnect.     |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_REVOCATION                   |     3 | Signature for confirming a key revocation.                         |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_NAMESPACE_ADVERTISEMENT      |     4 | Signature for a namespace/pseudonym advertisement.                 |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_PEER_PLACEMENT               |     5 | Signature by which a peer affirms that it is providing a certain   |
|                                  |       | bit of content (used in LOCation URIs).                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_FS_KBLOCK                    |     6 | Obsolete, legacy value.                                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_FS_SBLOCK                    |     7 | Obsolete, legacy value.                                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_FS_NBLOCK                    |     8 | Obsolete, legacy value.                                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_FS_NBLOCK_KSIG               |     9 | Obsolete, legacy value.                                            |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_RESOLVER_RESPONSE            |    10 | Signature of an DNS_Advertisement                                  |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_DNS_RECORD                   |    11 |                                                                    |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_CHAT_MESSAGE                 |    12 | Signature of a chat message.                                       |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_CHAT_RECEIPT                 |    13 | Signature of confirmation receipt for a chat message.              |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_NSE_SEND                     |    14 | Signature of a network size estimate message.                      |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_GNS_RECORD_SIGN              |    15 | Signature of a gnunet naming system record block.                  |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_ECC_KEY                      |    16 | Purpose is to set a session key.                                   |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG__FS_UBLOCK                   |    17 | UBlock Signature, done using DSS, not ECC                          |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_REGEX_ACCEPT                 |    18 | Accept state in regex DFA.  Peer affirms that it offers the        |
|                                  |       | matching service.                                                  |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_MULTICAST_MESSAGE            |    19 | Signature of a multicast message sent by the origin.               |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_CONVERSATION_RING            |    20 | Signature of a conversation ring.                                  |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_SECRETSHARING_DKG1           |  ? 22 | Signature for the first round of distributed key generation.       |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_SECRETSHARING_DKG2           |  ? 23 | Signature for the second round of distributed key generation.      |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_SECRETSHARING_DECRYPTION     |    23 | Signature for cooperative decryption.                              |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_MULTICAST_REQUEST            |    24 | Signature of a multicast request sent by a member.                 |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_SENSOR_ANOMALY_REPORT        |    25 | Signature for a sensor anomaly report message.                     |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_GNUID_TOKEN                  |    26 | Signature for a GNUid Token.                                       |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_GNUID_TICKET                 |    27 | Signature for a GNUid Ticket.                                      |
+----------------------------------+-------+--------------------------------------------------------------------+
| SIG_CREDENTIAL                   |    28 | Signature for a GNUnet credential.                                 |
+----------------------------------+-------+--------------------------------------------------------------------+

========================================================================
[B] References
========================================================================

[1] https://tools.ietf.org/rfc/rfc8032.txt
[2] https://ed25519.cr.yp.to/ed25519-20110926.pdf
[3] https://www.crockford.com/wrmg/base32.html


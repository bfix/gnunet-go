package message

import (
	"bytes"
	"encoding/hex"
	"gnunet/crypto"
	"gnunet/util"
	"testing"

	"github.com/bfix/gospel/crypto/ed25519"
	"github.com/bfix/gospel/data"
	"github.com/bfix/gospel/math"
)

// TestRecordset implements the test case as defined in the GNS draft
// (see section 13. Test vectors)
func TestRecordset(t *testing.T) {
	var (
		D = []byte{
			0xc0, 0x04, 0xa6, 0xd4, 0x96, 0x68, 0xff, 0x30,
			0xd8, 0x31, 0x6b, 0x9c, 0x2c, 0x1f, 0x24, 0x2d,
			0x16, 0x98, 0x5f, 0x48, 0xe7, 0x46, 0x7a, 0xff,
			0x2d, 0x4d, 0x06, 0xc9, 0x1b, 0xd0, 0x0c, 0x73,
		}
		ZTYPE = []byte{0x00, 0x01, 0x00, 0x00}
		ZKEY  = []byte{
			0xde, 0x93, 0xf1, 0x93, 0x8d, 0xf8, 0x5f, 0x19,
			0x18, 0xa3, 0x5c, 0x6d, 0xd0, 0xf3, 0xae, 0x70,
			0xf9, 0x46, 0x92, 0xa7, 0x1f, 0xe1, 0xfb, 0xff,
			0xb7, 0x5e, 0xe1, 0x85, 0x9c, 0x44, 0x4a, 0x44,
		}
		ZID    = "000G006YJFRS73FRBWCHH8TWDQ8F7BKGZ53959RZW7XZZDTYW62SRH2A8G"
		RECSET = &RecordSet{
			Count: 2,
			Records: []*ResourceRecord{
				{
					Expires: util.AbsoluteTime{
						Val: uint64(1620285180789328),
					},
					Size:  4,
					Type:  1,
					Flags: 0,
					Data: []byte{
						0x01, 0x02, 0x03, 0x04,
					},
				},
				{
					Expires: util.AbsoluteTime{
						Val: uint64(1620285180789328),
					},
					Size:  32,
					Type:  65536,
					Flags: 2,
					Data: []byte{
						0x00, 0x01, 0x00, 0x00, 0xbe, 0x1c, 0xd4, 0xe7,
						0x0d, 0xc7, 0xcf, 0xf6, 0xcb, 0x44, 0x6f, 0x77,
						0xfe, 0x4f, 0xd3, 0x6b, 0x19, 0xa3, 0x37, 0x18,
						0xd7, 0xc2, 0x33, 0x1b, 0xe6, 0x55, 0x08, 0x36,
					},
				},
			},
			Padding: make([]byte, 0),
		}
		RDATA = []byte{
			0x00, 0x00, 0x00, 0x02,
			0x00, 0x05, 0xc1, 0xa4, 0x0a, 0xa2, 0xc2, 0x50,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
			0x00, 0x05, 0xc1, 0xa4, 0x0a, 0xa2, 0xc2, 0x50,
			0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,
			0xbe, 0x1c, 0xd4, 0xe7, 0x0d, 0xc7, 0xcf, 0xf6,
			0xcb, 0x44, 0x6f, 0x77, 0xfe, 0x4f, 0xd3, 0x6b,
			0x19, 0xa3, 0x37, 0x18, 0xd7, 0xc2, 0x33, 0x1b,
			0xe6, 0x55, 0x08, 0x36, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		}
		BDATA = []byte{
			0x79, 0x99, 0x5b, 0xb1, 0xa9, 0x9f, 0x2d, 0xc2,
			0xdd, 0x91, 0x75, 0x7a, 0x92, 0x9d, 0x57, 0xbc,
			0x5e, 0x87, 0xf2, 0xbb, 0xc8, 0xa4, 0x75, 0xa1,
			0x54, 0x9d, 0x7e, 0x5e, 0x4a, 0x9d, 0x40, 0x76,
			0xe2, 0xc6, 0x76, 0xf1, 0x39, 0xbb, 0x2b, 0x85,
			0xb4, 0xc0, 0x94, 0x43, 0xb5, 0x72, 0x4e, 0xe0,
			0x51, 0x12, 0x83, 0xbb, 0x2b, 0xf0, 0x84, 0x01,
			0x3c, 0x72, 0xad, 0x3c, 0x51, 0x8e, 0x7b, 0x34,
			0xe5, 0x2e, 0x52, 0x6f, 0xa7, 0x8a, 0xe1, 0x92,
			0x1a, 0x9a, 0xc0, 0x3d, 0xb4, 0xd6, 0x9e, 0x94,
			0x81, 0xe9, 0xa8, 0xc0, 0x4a, 0x32, 0x6f, 0x0a,
			0xdb, 0x2c, 0x35, 0x29, 0x6b, 0xad, 0x07, 0x07,
			0xbc, 0xd0, 0x0f, 0xf6, 0x68, 0xf6, 0x05, 0xab,
			0x16, 0x58, 0x98, 0x41, 0x87, 0x08, 0x31, 0xb2,
			0x43, 0xb8, 0x7b, 0x37, 0xfc, 0x36, 0x0e, 0x33,
			0x51, 0x2b, 0x75, 0xde, 0x81, 0x98, 0x22, 0xe7,
			0x9d, 0x98, 0x9a, 0x92,
		}
		LABEL = "test"
	)
	d := util.Reverse(D)
	prv := ed25519.NewPrivateKeyFromD(math.NewIntFromBytes(d))
	pub := prv.Public()
	zkey := pub.Q.Bytes()
	if !bytes.Equal(zkey, ZKEY) {
		t.Logf("pub.Q = %s\n", hex.EncodeToString(zkey))
		t.Logf("     != %s\n", hex.EncodeToString(ZKEY))
		t.Fatal("zone key mismatch")
	}
	buf := append(ZTYPE, ZKEY...)
	zid := util.EncodeBinaryToString(buf)
	if zid != ZID {
		t.Fatal("Zone ID mismatch")
	}

	RECSET.SetPadding()
	rdata, err := data.Marshal(RECSET)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(rdata, RDATA) {
		t.Logf("sizes: %d -- %d\n", len(rdata), len(RDATA))
		t.Logf("rdata = %s\n", hex.EncodeToString(rdata))
		t.Logf("RDATA = %s\n", hex.EncodeToString(RDATA))
		t.Fatal("RDATA mismatch")
	}
	bdata, err := crypto.EncryptBlock(rdata, pub, LABEL)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(bdata, BDATA) {
		t.Logf("sizes: %d -- %d\n", len(bdata), len(BDATA))
		t.Logf("bdata    = %s\n", hex.EncodeToString(bdata))
		t.Logf("BDATA = %s\n", hex.EncodeToString(BDATA))
		t.Fatal("BDATA mismatch")
	}
}

// This file is part of gnunet-go, a GNUnet-implementation in Golang.
// Copyright (C) 2019-2022 Bernd Fix  >Y<
//
// gnunet-go is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// gnunet-go is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// SPDX-License-Identifier: AGPL3.0-or-later

package message

import (
	"bytes"
	"encoding/hex"
	"gnunet/crypto"
	"gnunet/util"
	"testing"

	"github.com/bfix/gospel/crypto/ed25519"
	"github.com/bfix/gospel/data"
	"github.com/bfix/gospel/math"
)

// TestRecordsetPKEY implements the test case as defined in the GNS draft
// (see section 13. Test vectors, case "PKEY")
func TestRecordsetPKEY(t *testing.T) {
	var (
		D = []byte{
			0x50, 0xd7, 0xb6, 0x52, 0xa4, 0xef, 0xea, 0xdf,
			0xf3, 0x73, 0x96, 0x90, 0x97, 0x85, 0xe5, 0x95,
			0x21, 0x71, 0xa0, 0x21, 0x78, 0xc8, 0xe7, 0xd4,
			0x50, 0xfa, 0x90, 0x79, 0x25, 0xfa, 0xfd, 0x98,
		}
		ZTYPE = []byte{0x00, 0x01, 0x00, 0x00}
		ZKEY  = []byte{
			0x67, 0x7c, 0x47, 0x7d, 0x2d, 0x93, 0x09, 0x7c,
			0x85, 0xb1, 0x95, 0xc6, 0xf9, 0x6d, 0x84, 0xff,
			0x61, 0xf5, 0x98, 0x2c, 0x2c, 0x4f, 0xe0, 0x2d,
			0x5a, 0x11, 0xfe, 0xdf, 0xb0, 0xc2, 0x90, 0x1f,
		}
		ZID    = "000G0037FH3QTBCK15Y8BCCNRVWPV17ZC7TSGB1C9ZG2TPGHZVFV1GMG3W"
		RECSET = &RecordSet{
			Count: 2,
			Records: []*ResourceRecord{
				{
					Expires: util.AbsoluteTime{
						Val: uint64(14888744139323793),
					},
					Size:  4,
					Type:  1,
					Flags: 0,
					Data: []byte{
						0x01, 0x02, 0x03, 0x04,
					},
				},
				{
					Expires: util.AbsoluteTime{
						Val: uint64(26147096139323793),
					},
					Size:  36,
					Type:  crypto.ZONE_PKEY,
					Flags: 2,
					Data: []byte{
						0x00, 0x01, 0x00, 0x00,
						0x0e, 0x60, 0x1b, 0xe4, 0x2e, 0xb5, 0x7f, 0xb4,
						0x69, 0x76, 0x10, 0xcf, 0x3a, 0x3b, 0x18, 0x34,
						0x7b, 0x65, 0xa3, 0x3f, 0x02, 0x5b, 0x5b, 0x17,
						0x4a, 0xbe, 0xfb, 0x30, 0x80, 0x7b, 0xfe, 0xcf,
					},
				},
			},
			Padding: make([]byte, 0),
		}
		RDATA = []byte{
			0x00, 0x00, 0x00, 0x02, 0x00, 0x34, 0xe5, 0x3b,
			0xe1, 0x93, 0x79, 0x91, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x02, 0x03, 0x04, 0x00, 0x5c, 0xe4, 0xa5,
			0x39, 0x4a, 0xd9, 0x91, 0x00, 0x00, 0x00, 0x24,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
			0x00, 0x01, 0x00, 0x00, 0x0e, 0x60, 0x1b, 0xe4,
			0x2e, 0xb5, 0x7f, 0xb4, 0x69, 0x76, 0x10, 0xcf,
			0x3a, 0x3b, 0x18, 0x34, 0x7b, 0x65, 0xa3, 0x3f,
			0x02, 0x5b, 0x5b, 0x17, 0x4a, 0xbe, 0xfb, 0x30,
			0x80, 0x7b, 0xfe, 0xcf, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
		}
		NONCE = []byte{
			0x67, 0xeb, 0xda, 0x27, 0x00, 0x34, 0xe5, 0x3b,
			0xe1, 0x93, 0x79, 0x91, 0x00, 0x00, 0x00, 0x01,
		}
		SKEY = []byte{
			0x55, 0x1f, 0x15, 0x7a, 0xcf, 0x2b, 0xf1, 0xd4,
			0xa9, 0x75, 0x03, 0x69, 0x99, 0xea, 0x7c, 0x82,
			0x86, 0xac, 0xb3, 0x18, 0xf1, 0x49, 0x3e, 0x63,
			0xb5, 0x00, 0x60, 0x3a, 0x9b, 0x02, 0xe3, 0xe4,
		}
		BDATA = []byte{
			0x00, 0xe4, 0x83, 0x7e, 0xb5, 0xd0, 0x4f, 0x92,
			0x90, 0x3d, 0xe4, 0xb5, 0x23, 0x4e, 0x8c, 0xca,
			0xc5, 0x73, 0x6c, 0x97, 0x93, 0x37, 0x9a, 0x59,
			0xc3, 0x33, 0x75, 0xfc, 0x89, 0x51, 0xac, 0xa2,
			0xeb, 0x7a, 0xad, 0x06, 0x7b, 0xf9, 0xaf, 0x60,
			0xbf, 0x26, 0x75, 0x86, 0x46, 0xa1, 0x7f, 0x5e,
			0x5c, 0x3b, 0x62, 0x15, 0xf9, 0x40, 0x79, 0x54,
			0x5b, 0x1c, 0x4d, 0x4f, 0x1b, 0x2e, 0xbb, 0x22,
			0xc2, 0xb4, 0xda, 0xd4, 0x41, 0x26, 0x81, 0x7b,
			0x6f, 0x00, 0x15, 0x30, 0xd4, 0x76, 0x40, 0x1d,
			0xd6, 0x7a, 0xc0, 0x14, 0x85, 0x54, 0xe8, 0x06,
			0x35, 0x3d, 0xa9, 0xe4, 0x29, 0x80, 0x79, 0xf3,
			0xe1, 0xb1, 0x69, 0x42, 0xc4, 0x8d, 0x90, 0xc4,
			0x36, 0x0c, 0x61, 0x23, 0x8c, 0x40, 0xd9, 0xd5,
			0x29, 0x11, 0xae, 0xa5, 0x2c, 0xc0, 0x03, 0x7a,
			0xc7, 0x16, 0x0b, 0xb3, 0xcf, 0x5b, 0x2f, 0x4a,
			0x72, 0x2f, 0xd9, 0x6b,
		}
		LABEL = "test"
	)

	// check zone key pair
	prv := ed25519.NewPrivateKeyFromD(math.NewIntFromBytes(D))
	pub := prv.Public()
	zkey := pub.Bytes()
	if !bytes.Equal(zkey, ZKEY) {
		t.Logf("pub = %s\n", hex.EncodeToString(zkey))
		t.Logf("   != %s\n", hex.EncodeToString(ZKEY))
		t.Fatal("zone key mismatch")
	}
	buf := append(ZTYPE, ZKEY...)
	zid := util.EncodeBinaryToString(buf)
	if zid != ZID {
		t.Fatal("Zone ID mismatch")
	}

	// assemble and check recordset
	RECSET.SetPadding()
	rdata, err := data.Marshal(RECSET)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(rdata, RDATA) {
		t.Logf("rdata = %s\n", hex.EncodeToString(rdata))
		t.Logf("RDATA = %s\n", hex.EncodeToString(RDATA))
		t.Fatal("RDATA mismatch")
	}

	// check symmetric keys and nonce
	zk := crypto.NewZoneKey(crypto.ZONE_PKEY, pub)
	expires := RECSET.Expires()
	skey := crypto.DeriveKey(LABEL, zk, expires, 1)
	if !bytes.Equal(skey[32:], NONCE) {
		t.Logf("nonce = %s\n", hex.EncodeToString(skey[32:]))
		t.Logf("NONCE = %s\n", hex.EncodeToString(NONCE))
		t.Fatal("NONCE mismatch")
	}
	if !bytes.Equal(skey[:32], SKEY) {
		t.Logf("skey = %s\n", hex.EncodeToString(skey[:32]))
		t.Logf("SKEY = %s\n", hex.EncodeToString(SKEY))
		t.Fatal("SKEY mismatch")
	}

	// check block encryption
	bdata, err := crypto.CipherData(rdata, zk, LABEL, expires, 1)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(bdata, BDATA) {
		t.Logf("bdata = %s\n", hex.EncodeToString(bdata))
		t.Logf("BDATA = %s\n", hex.EncodeToString(BDATA))
		t.Fatal("BDATA mismatch")
	}
}

// TestRecordsetEDKEY implements the test case as defined in the GNS draft
// (see section 13. Test vectors, case "EDKEY")
func TestRecordsetEDKEY(t *testing.T) {
	var (
		SEED = []byte{
			0x31, 0xa4, 0x7c, 0x48, 0xb4, 0xe2, 0xa4, 0x6e,
			0x40, 0x2c, 0x0b, 0xd3, 0x95, 0x47, 0x11, 0xc7,
			0xbb, 0x51, 0xa6, 0xf3, 0x6c, 0x46, 0x3a, 0x6f,
			0x99, 0x45, 0x0b, 0xa0, 0x79, 0x4c, 0xf6, 0x51,
		}
		ZTYPE = []byte{0x00, 0x01, 0x00, 0x14}
		ZKEY  = []byte{
			0x42, 0x8b, 0x3f, 0xab, 0x5a, 0x4c, 0x87, 0x5d,
			0x29, 0x10, 0xd6, 0x7f, 0x1c, 0xc4, 0x3c, 0x2f,
			0xca, 0xd0, 0x40, 0xe8, 0x40, 0xe2, 0x2f, 0x7e,
			0x3d, 0xcf, 0xa5, 0x3c, 0xb9, 0x64, 0x12, 0x3d,
		}
		ZID    = "000G0522HCZTPPJCGXEJJ46PFWEC8F1FSB841T20W8QQWFEFMMYBJS0J7M"
		RECSET = &RecordSet{
			Count: 2,
			Records: []*ResourceRecord{
				{
					Expires: util.AbsoluteTime{
						Val: uint64(14888744139491809),
					},
					Size:  4,
					Type:  1,
					Flags: 0,
					Data: []byte{
						0x01, 0x02, 0x03, 0x04,
					},
				},
				{
					Expires: util.AbsoluteTime{
						Val: uint64(26147096139491809),
					},
					Size:  36,
					Type:  crypto.ZONE_EDKEY,
					Flags: 2,
					Data: []byte{
						0x00, 0x01, 0x00, 0x14,
						0x4f, 0x88, 0x60, 0xbd, 0xc9, 0xc9, 0x03, 0x88,
						0xc4, 0x85, 0xee, 0xd1, 0xa2, 0xba, 0xc9, 0x2e,
						0xe8, 0x25, 0xe4, 0x48, 0xe3, 0xfe, 0x41, 0x1f,
						0xc3, 0x5e, 0xd6, 0x1d, 0x97, 0x0d, 0x9c, 0x98,
					},
				},
			},
			Padding: make([]byte, 0),
		}
		RDATA = []byte{
			0x00, 0x00, 0x00, 0x02, 0x00, 0x34, 0xe5, 0x3b,
			0xe1, 0x96, 0x09, 0xe1, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x02, 0x03, 0x04, 0x00, 0x5c, 0xe4, 0xa5,
			0x39, 0x4d, 0x69, 0xe1, 0x00, 0x00, 0x00, 0x24,
			0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02,
			0x00, 0x01, 0x00, 0x14, 0x4f, 0x88, 0x60, 0xbd,
			0xc9, 0xc9, 0x03, 0x88, 0xc4, 0x85, 0xee, 0xd1,
			0xa2, 0xba, 0xc9, 0x2e, 0xe8, 0x25, 0xe4, 0x48,
			0xe3, 0xfe, 0x41, 0x1f, 0xc3, 0x5e, 0xd6, 0x1d,
			0x97, 0x0d, 0x9c, 0x98, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
		}
		NONCE = []byte{
			0x6c, 0xe3, 0x08, 0x19, 0x9d, 0x2c, 0xad, 0x48,
			0xfd, 0x96, 0x0a, 0xe3, 0xbf, 0x25, 0x58, 0x99,
			0x00, 0x34, 0xe5, 0x3b, 0xe1, 0x96, 0x09, 0xe1,
		}
		SKEY = []byte{
			0x57, 0xfa, 0x02, 0x23, 0xa3, 0x53, 0x3c, 0xdd,
			0x63, 0x92, 0xe1, 0xf7, 0x2c, 0x3e, 0xda, 0xb0,
			0xf6, 0x84, 0x42, 0x9a, 0xe0, 0xeb, 0x61, 0x34,
			0x7e, 0x90, 0xf6, 0x17, 0x36, 0x3c, 0x76, 0x8d,
		}
		BDATA = []byte{
			0x3f, 0xce, 0x07, 0x3d, 0x7b, 0x8d, 0x09, 0x2d,
			0xf4, 0x44, 0x4a, 0x93, 0x8c, 0xf0, 0x64, 0x1d,
			0xf8, 0xdc, 0x1c, 0x50, 0x5b, 0xda, 0x6c, 0x1a,
			0x6b, 0x7d, 0xfd, 0x0a, 0x31, 0xe9, 0xb1, 0x50,
			0x2d, 0x18, 0x02, 0x99, 0xd1, 0x1f, 0x17, 0xcb,
			0x47, 0xa2, 0x44, 0x64, 0xbb, 0x8c, 0x98, 0x3c,
			0x55, 0x18, 0xe0, 0x4a, 0x40, 0x6f, 0x80, 0xeb,
			0x1f, 0x86, 0xb7, 0x0d, 0xc7, 0x74, 0x06, 0x69,
			0xbb, 0xb7, 0x2d, 0x39, 0xb1, 0xda, 0x45, 0x70,
			0x26, 0xfa, 0xdc, 0x37, 0x04, 0x17, 0x91, 0x9e,
			0x67, 0xcc, 0xe8, 0x45, 0x29, 0x85, 0xf5, 0x04,
			0xe6, 0xa4, 0x7f, 0x86, 0x4e, 0xd3, 0xe7, 0xc8,
			0x88, 0xfe, 0xda, 0x90, 0xa4, 0x3d, 0xa9, 0x55,
			0x47, 0xd3, 0x36, 0xfc, 0x70, 0x69, 0x7a, 0x42,
			0x46, 0xe7, 0xe5, 0xdf, 0xc6, 0x95, 0x7e, 0xce,
			0x20, 0xdd, 0x4c, 0x20, 0x41, 0xad, 0x20, 0x6f,
			0x3b, 0x50, 0x98, 0x41, 0x4c, 0x3a, 0x66, 0x67,
			0x6d, 0xc0, 0x77, 0x80, 0x78, 0xaf, 0x27, 0x2e,
			0x76, 0x52, 0x23, 0x35,
		}
		LABEL = "test"
	)

	// check zone key pair
	prv := ed25519.NewPrivateKeyFromSeed(SEED)
	pub := prv.Public()
	zkey := pub.Bytes()
	if !bytes.Equal(zkey, ZKEY) {
		t.Logf("pub = %s\n", hex.EncodeToString(zkey))
		t.Logf("   != %s\n", hex.EncodeToString(ZKEY))
		t.Fatal("zone key mismatch")
	}
	buf := append(ZTYPE, ZKEY...)
	zid := util.EncodeBinaryToString(buf)
	if zid != ZID {
		t.Fatal("Zone ID mismatch")
	}

	// assemble and check recordset
	RECSET.SetPadding()
	rdata, err := data.Marshal(RECSET)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(rdata, RDATA) {
		t.Logf("rdata = %s\n", hex.EncodeToString(rdata))
		t.Logf("RDATA = %s\n", hex.EncodeToString(RDATA))
		t.Fatal("RDATA mismatch")
	}

	// check symmetric keys and nonce
	zk := crypto.NewZoneKey(crypto.ZONE_EDKEY, pub)
	expires := RECSET.Expires()
	skey := crypto.DeriveKey(LABEL, zk, expires, 1)
	if !bytes.Equal(skey[32:], NONCE) {
		t.Logf("nonce = %s\n", hex.EncodeToString(skey[32:]))
		t.Logf("NONCE = %s\n", hex.EncodeToString(NONCE))
		t.Fatal("NONCE mismatch")
	}
	if !bytes.Equal(skey[:32], SKEY) {
		t.Logf("skey = %s\n", hex.EncodeToString(skey[:32]))
		t.Logf("SKEY = %s\n", hex.EncodeToString(SKEY))
		t.Fatal("SKEY mismatch")
	}

	// check block encryption
	bdata, err := crypto.CipherData(rdata, zk, LABEL, expires, 1)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(bdata, BDATA) {
		t.Logf("bdata = %s\n", hex.EncodeToString(bdata))
		t.Logf("BDATA = %s\n", hex.EncodeToString(BDATA))
		t.Fatal("BDATA mismatch")
	}
}

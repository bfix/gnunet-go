package gns

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/bfix/gospel/crypto/ed25519"
)

var (
	PUB = []byte{
		0x93, 0x34, 0x71, 0xF6, 0x99, 0x19, 0x0C, 0x62,
		0x85, 0xC7, 0x9B, 0x83, 0x9D, 0xCA, 0x83, 0x91,
		0x38, 0xFA, 0x87, 0xFB, 0xB8, 0xD4, 0xF6, 0xF0,
		0xF0, 0x4B, 0x7F, 0x0A, 0x48, 0xBF, 0x95, 0xF7,
	}
	LABEL = "home"
)

func TestDeriveBlockKey(t *testing.T) {
	var (
		SKEY = []byte{
			0x1D, 0x86, 0x8E, 0xF7, 0x30, 0x96, 0x3B, 0x39,
			0x66, 0xE6, 0x49, 0xD8, 0xF1, 0x13, 0x18, 0x39,
			0x8A, 0x7A, 0xB0, 0xF3, 0xDC, 0xF6, 0xE7, 0x2A,
			0xF6, 0x65, 0xDE, 0x86, 0x47, 0x7B, 0x20, 0x1B,

			0x21, 0xA6, 0xFA, 0x55, 0x7C, 0x29, 0xF5, 0x94,
			0x8E, 0x9A, 0x80, 0xB0, 0xB6, 0xD5, 0x4D, 0x38,
			0x0E, 0x6A, 0x0F, 0x42, 0x4B, 0x27, 0xBB, 0x6A,
			0x1E, 0xD1, 0x33, 0x08, 0xD6, 0x2E, 0x21, 0x8C,
		}
		IV = []byte{
			0xAC, 0x18, 0x03, 0xB7, 0x8B, 0x1E, 0x09, 0xA9,
			0xD0, 0x20, 0x47, 0x2B, 0x1B, 0x23, 0xE8, 0x24,

			0xC9, 0x23, 0x9E, 0x61, 0x3A, 0x8D, 0x95, 0xA9,
			0x3F, 0x6C, 0x1C, 0xC8, 0xCB, 0xD1, 0xBD, 0x6B,
		}
	)

	iv, skey := deriveBlockKey(LABEL, ed25519.NewPublicKeyFromBytes(PUB))

	if bytes.Compare(IV[:16], iv.AESIv) != 0 {
		t.Logf("AES_IV(computed) = %s\n", hex.EncodeToString(iv.AESIv))
		t.Logf("AES_IV(expected) = %s\n", hex.EncodeToString(IV[:16]))
		t.Fatal("AES IV mismatch")
	}
	if bytes.Compare(IV[16:], iv.TwofishIv) != 0 {
		t.Logf("Twofish_IV(computed) = %s\n", hex.EncodeToString(iv.TwofishIv))
		t.Logf("Twofish_IV(expected) = %s\n", hex.EncodeToString(IV[16:]))
		t.Fatal("Twofish IV mismatch")
	}

	if bytes.Compare(SKEY[:32], skey.AESKey) != 0 {
		t.Logf("AES_KEY(computed) = %s\n", hex.EncodeToString(skey.AESKey))
		t.Logf("AES_KEY(expected) = %s\n", hex.EncodeToString(SKEY[:32]))
		t.Fatal("AES KEY mismatch")
	}
	if bytes.Compare(SKEY[32:], skey.TwofishKey) != 0 {
		t.Logf("Twofish_KEY(computed) = %s\n", hex.EncodeToString(skey.TwofishKey))
		t.Logf("Twofish_KEY(expected) = %s\n", hex.EncodeToString(SKEY[32:]))
		t.Fatal("Twofish KEY mismatch")
	}
}

func TestDecryptBlock(t *testing.T) {
	var (
		DATA = []byte{
			0xAC, 0xA5, 0x3C, 0x55, 0x63, 0x21, 0x31, 0x1F,
			0x11, 0x6E, 0xEF, 0x48, 0xED, 0x53, 0x46, 0x31,
			0x7C, 0x50, 0xFB, 0x6B, 0xA6, 0xC8, 0x6C, 0x46,
			0x1E, 0xE3, 0xCA, 0x45, 0xCD, 0x5B, 0xD6, 0x86,
			0x42, 0x87, 0xEF, 0x18, 0xCE, 0x8E, 0x83, 0x21,
			0x04, 0xCB, 0xCF, 0x40, 0x7E, 0x0F, 0x51, 0x54,
			0xE2, 0x3C, 0xDE, 0xE9, 0x22, 0x00, 0xFF, 0x40,
			0xBB, 0x53, 0xE3, 0x69, 0x99, 0x92, 0x47, 0x97,
			0xF0, 0x4E, 0x3B, 0x70,
		}
		OUT = []byte{
			0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0xAD, 0x0E,
			0x60, 0x28, 0xFE, 0x80, 0x00, 0x00, 0x00, 0x10,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x0A, 0x68, 0x6F, 0x69, 0x2D, 0x70, 0x6F, 0x6C,
			0x6C, 0x6F, 0x69, 0x03, 0x6F, 0x72, 0x67, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
		}
	)

	out, err := DecryptBlock(DATA, ed25519.NewPublicKeyFromBytes(PUB), LABEL)
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(out, OUT) != 0 {
		t.Logf("Decrypt(computed) = %s\n", hex.EncodeToString(out))
		t.Logf("Decrypt(expected) = %s\n", hex.EncodeToString(OUT))
		t.Fatal("Decryptions failed")
	}
}

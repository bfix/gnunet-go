{{define "new_zone"}}
<div>
    <h3>Creating a new GNS zone:</h3>
    <form action="/action/new/zone/0" method="post" onsubmit="return(zone_validate());">
        <table>
            <tr>
                <td align="right"><b>Zone name:</b></td>
                <td><input type="text" id="name" name="name"></td>
            </tr>
            <tr>
                <td align="right" valign="top"><b>Key type:</b></td>
                <td>
                    <input type="radio" id="pkey" name="keytype" value="PKEY" checked="checked">&nbsp;PKEY (Ed25519+EcDSA)<br>
                    <input type="radio" id="edkey" name="keytype" value="EDKEY">&nbsp;EDKEY (EdDSA)
                </td>
            </tr>
        </table>
        <button id="submit">Add zone</button>&nbsp;<a href="/"><button id="leave">Leave</button></a>
    </form>
</div>
<script>
    const zone_names = [
        {{range $i, $n := .Names}}
        '{{$n}}',
        {{end}}
    ];
    function zone_validate() {
        const name = document.getElementById("name").value;
        if (!name) {
            alert("Empty zone name not allowed");
            return false;
        }
        for (var i = 0; i < names.length; i++) {
            if (zone_names[i] == name) {
                alert("Zone name already used");
                return false;
            }
        }
        return(true);
    }
</script>
{{end}}

{{define "new_label"}}
<div>
    <h3>Creating a new GNS zone label:</h3>
    <form action="/action/new/label/{{.Ref}}" onsubmit="return(label_validate());">
        <table>
            <tr>
                <td align="right">Name:</td>
                <td><input type="text" id="name" name="name"></td>
            </tr>
        </table>
        <button id="submit">Add label</button>&nbsp;<a href="/"><button>Leave</button></a>
    </form>
</div>
<script>
    const label_names = [
        {{range $i, $n := .Names}}
        '{{$n}}',
        {{end}}
    ];
    function label_validate() {
        const name = document.getElementById("name").value;
        if (!name) {
            alert("Empty labels not allowed");
            return false;
        }
        for (var i = 0; i < names.length; i++) {
            if (label_names[i] == name) {
                alert("Label already used");
                return false;
            }
        }
        return(true);
    }
</script>
{{end}}

{{define "new_record"}}
{{$data := .}}
<div>
    <h3>Creating a new GNS resource record:</h3>
    <div class="tabset">
        {{range $i, $type := .RRtypes}}
        <input type="radio" name="tabset" id="tab{{$i}}" aria-controls="tab{{$i}}" {{if eq $i 0}}checked{{end}}>
        <label for="tab{{$i}}">{{rrtype $type.Type}}</label>
        {{end}}
        <div class="tab-panels">
            {{range $i, $type := .RRtypes}}
            <section id="tab{{$i}}" class="tab-panel">
                {{$t := rrtype $type.Type}}
                {{$mode := "Add"}}
                {{if eq $t "PKEY"}}{{template "PKEY" $data}}{{end}}
                {{if eq $t "EDKEY"}}{{template "EDKEY" $data}}{{end}}
                {{if eq $t "NICK"}}{{template "NICK" $data}}{{end}}
                {{if eq $t "LEHO"}}{{template "LEHO" $data}}{{end}}
                {{if eq $t "REDIRECT"}}{{template "REDIRECT" $data}}{{end}}
                {{if eq $t "GNS2DNS"}}{{template "GNS2DNS" $data}}{{end}}
                {{if eq $t "BOX"}}{{template "BOX" $data}}{{end}}
                {{if eq $t "DNS_CNAME"}}{{template "DNS_CNAME" $data}}{{end}}
                {{if eq $t "DNS_A"}}{{template "DNS_A" $data}}{{end}}
                {{if eq $t "DNS_AAAA"}}{{template "DNS_AAAA" $data}}{{end}}
                {{if eq $t "DNS_MX"}}{{template "DNS_MX" $data}}{{end}}
                {{if eq $t "DNS_TXT"}}{{template "DNS_TXT" $data}}{{end}}
            </section>
            {{end}}
        </div>
    </div>
    <a href="/"><button>Leave</button></a>
</div>
{{end}}


{{define "edit_zone"}}
    {{$type := index .Params "keytype"}}
    {{$name := index .Params "name"}}
    <div>
        <h3>Edit a [{{$type}}] GNS zone:</h3>
        <p><small>(Created: {{index .Params "created"}}, Last edited: {{index .Params "modified"}}</small></p>
        <form action="/action/upd/zone/{{.Ref}}" method="post" onsubmit="return(zone_validate());">
            <table>
                <tr>
                    <td align="right"><b>Zone name:</b></td>
                    <td><input type="text" id="name" name="name" value="{{$name}}"></td>
                </tr>
                <tr>
                    <td colspan="2">
                        <p>The type of the zone key cannot be changed. It is currently set to
                        {{if eq $type "PKEY"}}PKEY (Ed25519+EcDSA){{else}}EDKEY (EdDSA){{end}}.</p>
                    </td>
                </tr>
            </table>
            <button id="submit">Change zone name</button>
        </form>
        <p><a href="/"><button>Leave</button></a></p>
    </div>
    <script>
        const old_zone = "{{$name}}";
        const zone_names = [
            {{range $i, $n := .Names}}
                "{{$n}}",
            {{end}}
        ];
        function zone_validate() {
            const name = document.getElementById("name").value;
            if (!name) {
                alert("Empty zone name not allowed");
                return false;
            }
            if (name == old_zone) {
                alert("Zone name not changed");
                return false;
            }
            for (var i = 0; i < names.length; i++) {
                if (zone_names[i] == name) {
                    alert("Zone name already in-use");
                    return false;
                }
            }
            return(true);
        }
    </script>
{{end}}

{{define "edit_label"}}
    {{$name := index .Params "name"}}
    <div>
        <h3>Edit a GNS zone label:</h3>
        <form action="/action/upd/label/{{.Ref}}" onsubmit="return(label_validate());">
            <table>
                <tr>
                    <td align="right">Name:</td>
                    <td><input type="text" id="name" name="name" value="{{$name}}></td>
                </tr>
            </table>
            <button id="submit">Change label name</button>
        </form>
        <p><a href="/"><button>Leave</button></a></p>
    </div>
    <script>
        const old_label = "{{$name}}";
        const label_names = [
            {{range $i, $n := .Names}}
            '{{$n}}',
            {{end}}
        ];
        function label_validate() {
            const name = document.getElementById("name").value;
            if (!name) {
                alert("Empty labels not allowed");
                return false;
            }
            if (name == old_label) {
                alert("Label name not changed");
                return false;
            }
            for (var i = 0; i < names.length; i++) {
                if (label_names[i] == name) {
                    alert("Label name already in-use");
                    return false;
                }
            }
            return(true);
        }
    </script>
{{end}}

{{define "css"}}
<style>
    * {
        box-sizing: border-box;
    }
    body {
        margin: 2em 10em 2em 10em;
    }
    div.row::after {
        content: "";
        clear: both;
        display: table;
    }
    div.cell {
        display: inline;
        float: left;
    }
    div.box {
        border: 2px solid black;
        margin: 0.5em;
        padding: 0.5em;
    }
    div.block {
        margin: 0.5em;
        padding: 0.5em;
    }
    div.heading {
        color: white;
        background-color: orange;
        font-size: 200%;
        font-weight: bold;
        padding: 0.3em;
        margin: 1em 0 1em 0;
    }
    button.icon {
        border: none;
        color: black;
        background-color: transparent;
        padding: 0 0;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 100%;
        margin: 4px 2px;
        cursor: pointer;
    }
    .label {
        text-align: right;
        vertical-align: top;
        font-weight: bold;
    }            
    .title {
        font-size: 120%;
        font-weight: bold;
        margin-bottom: 0.5em;
    }
    .large {
        font-size: 200%;
        font-weight: bold;
    }
    .small {
        font-size: 75%;
    }
    .blue {
        color: blue !important;
    }
    .red {
        color: red !important;
    }
    .headline {
        color: white;
        padding: 0.3em;
    }
    .status-0 {
        background-color: green;
    }
    .status-1 {
        background-color: orange;
    }
    .status-2 {
        background-color: red;
    }
    .spacer-right {
        margin-right: 2em;
    }
    .changed {
        background-color: #fee;
    }
    table.rowed {
        border-collapse: separate;
    }
    table.rowed > tbody > tr {
        border: solid;
        border-width: 1px 0;
        border-color: #ccc;
    }
    tr.row:nth-child(even) {
        background: #fff;
    }
    tr.row:nth-child(odd) {
        background: #eee;
    }
    tr.header {
        background: #eef;
        color: black;
        font-weight: bold;
    }
    td {
        padding: 0.5em;
    }
    th {
        padding: 0.5em;
        text-align: center;
    }
    label[for=toggle] {
        cursor: pointer;
        border: 1px solid black;
        border-radius: 0.2em;
        background-color: #eeeeee;
        padding: 0.1em;
    }
    #toggle {
        display: none;
    }
    #toggle:not(:checked) ~ #toggled {
        display: none;
    }
    ul, #dashboard {
        list-style-type: none;
    }
    #dashboard {
        margin: 0;
        padding: 0;
    }
    li {
        margin: 0.5em;
    }
    .caret {
        cursor: pointer;
        user-select: none;
    }
    .caret::before {
        content: "\25B6";
        color: black;
        display: inline-block;
        margin-right: 6px;
    }
    .caret-down::before {
        transform: rotate(90deg);
    }
    .nested {
        display: none;
    }
    .active {
        display: block;
    }
    .tabset > input[type="radio"] {
        position: absolute;
        left: -200vw;
    }
    .tabset .tab-panel {
        display: none;
    }
    .tabset > input:first-child:checked ~ .tab-panels > .tab-panel:first-child,
    .tabset > input:nth-child(3):checked ~ .tab-panels > .tab-panel:nth-child(2),
    .tabset > input:nth-child(5):checked ~ .tab-panels > .tab-panel:nth-child(3),
    .tabset > input:nth-child(7):checked ~ .tab-panels > .tab-panel:nth-child(4),
    .tabset > input:nth-child(9):checked ~ .tab-panels > .tab-panel:nth-child(5),
    .tabset > input:nth-child(11):checked ~ .tab-panels > .tab-panel:nth-child(6),
    .tabset > input:nth-child(13):checked ~ .tab-panels > .tab-panel:nth-child(7),
    .tabset > input:nth-child(15):checked ~ .tab-panels > .tab-panel:nth-child(8),
    .tabset > input:nth-child(17):checked ~ .tab-panels > .tab-panel:nth-child(9),
    .tabset > input:nth-child(19):checked ~ .tab-panels > .tab-panel:nth-child(10),
    .tabset > input:nth-child(21):checked ~ .tab-panels > .tab-panel:nth-child(11),
    .tabset > input:nth-child(23):checked ~ .tab-panels > .tab-panel:nth-child(12),
    .tabset > input:nth-child(25):checked ~ .tab-panels > .tab-panel:nth-child(13),
    .tabset > input:nth-child(27):checked ~ .tab-panels > .tab-panel:nth-child(14),
    .tabset > input:nth-child(29):checked ~ .tab-panels > .tab-panel:nth-child(15),
    .tabset > input:nth-child(31):checked ~ .tab-panels > .tab-panel:nth-child(16),
    .tabset > input:nth-child(33):checked ~ .tab-panels > .tab-panel:nth-child(17),
    .tabset > input:nth-child(35):checked ~ .tab-panels > .tab-panel:nth-child(18),
    .tabset > input:nth-child(37):checked ~ .tab-panels > .tab-panel:nth-child(19),
    .tabset > input:nth-child(39):checked ~ .tab-panels > .tab-panel:nth-child(20) {
        display: block;
    }
    .tabset > label {
        position: relative;
        display: inline-block;
        padding: 15px 15px 25px;
        border: 1px solid transparent;
        border-bottom: 0;
        cursor: pointer;
        font-weight: 600;
    }
    .tabset > label::after {
        content: "";
        position: absolute;
        left: 15px;
        bottom: 10px;
        width: 22px;
        height: 4px;
        background: #8d8d8d;
    }
    .tabset > label:hover {
        color: #f90;
    }
    .tabset > input:focus + label {
        color: #06c;
    }
    .tabset > label:hover::after {
        background: #f90;
    }
    .tabset > input:focus + label::after,
    .tabset > input:checked + label::after {
        background: #06c;
    }
    .tabset > input:checked + label {
        border-color: #ccc;
        border-bottom: 1px solid #fff;
        margin-bottom: -1px;
    }
    .tab-panel {
        padding: 30px 0;
        border-top: 1px solid #ccc;
    }
    div.switch {
        display: none;
    }
    input.switch:checked ~ div.switch {
        display: block;
    }
    div.alternate {
        display: block;
    }
    input.alternate:checked ~ div.alternate {
        display: none;
    }
</style>
{{end}}

{{define "debug"}}
    <h1>Debug</h1>
    <h3>Parameters:</h3>
    <ul>
    {{range $k,$v := .Params}}
        <li><b>{{$k}}</b> = {{$v}}</li>
    {{end}}
    </ul>
    <h3>RR data:</h3>
    <p>{{.RR}}</p>
    {{if .Err}}
    <p>Error: <b>{{.Err}}</b></p>
    {{end}}
{{end}}

// This file is part of gnunet-go, a GNUnet-implementation in Golang.
// Copyright (C) 2019, 2020 Bernd Fix  >Y<
//
// gnunet-go is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// gnunet-go is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// SPDX-License-Identifier: AGPL3.0-or-later

package crypto

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/bfix/gospel/crypto/ed25519"
)

var (
	PUB = []byte{
		0x23, 0xd8, 0x9a, 0x29, 0xda, 0x0f, 0x68, 0x08,
		0xc6, 0xb6, 0xd5, 0xe5, 0x9c, 0xdd, 0x6a, 0x6f,
		0xcf, 0x3e, 0x2b, 0xb0, 0x06, 0xf4, 0x66, 0xd5,
		0x42, 0x3a, 0x93, 0x5d, 0x6b, 0x4d, 0x7e, 0x10,
	}
	LABEL = "home"
)

func TestDeriveBlockKey(t *testing.T) {
	var (
		SKEY = []byte{
			0x0c, 0xf7, 0x4d, 0x44, 0x19, 0xe4, 0xac, 0x52,
			0x3d, 0x14, 0xf4, 0x9b, 0x09, 0x6c, 0x52, 0xb6,
			0xb3, 0xf5, 0x06, 0x68, 0x98, 0x26, 0xa5, 0xea,
			0x06, 0x93, 0xfd, 0x4d, 0x80, 0xab, 0xf0, 0x44,
		}
		IV = []byte{
			0x04, 0x41, 0xfc, 0xfc, 0x96, 0x5f, 0x2e, 0xa7,
			0x35, 0xea, 0x59, 0xd8, 0x16, 0xd2, 0xfb, 0xc8,
		}
	)

	zkey := NewZoneKey(ZONE_PKEY, ed25519.NewPublicKeyFromBytes(PUB))
	skey := DeriveKey(LABEL, zkey)

	if !bytes.Equal(IV, skey[32:]) {
		t.Logf("AES_IV(computed) = %s\n", hex.EncodeToString(skey[32:]))
		t.Logf("AES_IV(expected) = %s\n", hex.EncodeToString(IV))
		t.Fatal("AES IV mismatch")
	}
	if !bytes.Equal(SKEY, skey[:32]) {
		t.Logf("AES_KEY(computed) = %s\n", hex.EncodeToString(skey[:32]))
		t.Logf("AES_KEY(expected) = %s\n", hex.EncodeToString(SKEY))
		t.Fatal("AES KEY mismatch")
	}
}

func TestDecryptBlock(t *testing.T) {
	var (
		DATA = []byte{
			0xf7, 0x61, 0x5f, 0x1f, 0xbc, 0x08, 0xb4, 0x32,
			0x46, 0xdb, 0x09, 0xb7, 0x57, 0x2d, 0x1c, 0x46,
			0xe2, 0xd8, 0xbf, 0x74, 0x17, 0x4e, 0x9a, 0x1e,
			0xf0, 0x7a, 0xed, 0x45, 0x58, 0x62, 0x60, 0xc9,
			0xd7, 0xbd, 0x0d, 0x34, 0x6e, 0x08, 0xd8, 0x65,
			0x69, 0x5c, 0x6d, 0x0b, 0xc6, 0x36, 0x73, 0x4c,
			0xac, 0xd1, 0xf2, 0x38, 0x5e, 0x63, 0x86, 0x80,
			0x54, 0xa2, 0x1e, 0x94, 0x77, 0xd0, 0xa0, 0x50,
			0x96, 0xbb, 0x33, 0x4b,
		}
		OUT = []byte{
			0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0xaf, 0x87,
			0x00, 0x5b, 0x91, 0x40, 0x00, 0x00, 0x00, 0x17,
			0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x0a,
			0x68, 0x6f, 0x69, 0x2d, 0x70, 0x6f, 0x6c, 0x6c,
			0x6f, 0x69, 0x03, 0x6f, 0x72, 0x67, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
		}
	)

	zkey := NewZoneKey(ZONE_PKEY, ed25519.NewPublicKeyFromBytes(PUB))
	out, err := CipherData(DATA, zkey, LABEL)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(out, OUT) {
		t.Logf("Decrypt(computed) = %s\n", hex.EncodeToString(out))
		t.Logf("Decrypt(expected) = %s\n", hex.EncodeToString(OUT))
		t.Fatal("Decryptions failed")
	}
}

func TestVerifyBlock(t *testing.T) {
	var (
		SIGNED = []byte{
			0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0f,
			0x00, 0x05, 0xad, 0x0e, 0x60, 0x28, 0xfe, 0x80,
			0xac, 0xa5, 0x3c, 0x55, 0x63, 0x21, 0x31, 0x1f,
			0x11, 0x6e, 0xef, 0x48, 0xed, 0x53, 0x46, 0x31,
			0x7c, 0x50, 0xfb, 0x6b, 0xa6, 0xc8, 0x6c, 0x46,
			0x1e, 0xe3, 0xca, 0x45, 0xcd, 0x5b, 0xd6, 0x86,
			0x42, 0x87, 0xef, 0x18, 0xce, 0x8e, 0x83, 0x21,
			0x04, 0xcb, 0xcf, 0x40, 0x7e, 0x0f, 0x51, 0x54,
			0xe2, 0x3c, 0xde, 0xe9, 0x22, 0x00, 0xff, 0x40,
			0xbb, 0x53, 0xe3, 0x69, 0x99, 0x92, 0x47, 0x97,
			0xf0, 0x4e, 0x3b, 0x70,
		}
		SIG = []byte{
			0x09, 0xc9, 0x6a, 0xda, 0x69, 0xce, 0x7c, 0x91,
			0xbd, 0xa4, 0x59, 0xdc, 0xc9, 0x76, 0xf4, 0x6c,
			0x62, 0xb7, 0x79, 0x3f, 0x94, 0xb2, 0xf6, 0xf0,
			0x90, 0x17, 0x4e, 0x2f, 0x68, 0x49, 0xf8, 0xcc,

			0x0b, 0x77, 0x32, 0x32, 0x28, 0x77, 0x2d, 0x2a,
			0x31, 0x31, 0xc1, 0x2c, 0x44, 0x18, 0xf2, 0x5f,
			0x1a, 0xe9, 0x8b, 0x2e, 0x65, 0xca, 0x1d, 0xe8,
			0x22, 0x82, 0x6a, 0x06, 0xe0, 0x6a, 0x5a, 0xe5,
		}
		PUB = []byte{
			0x26, 0x84, 0x1b, 0x24, 0x35, 0xa4, 0x63, 0xe9,
			0xf0, 0x48, 0xae, 0x3e, 0xf7, 0xe8, 0x1b, 0xca,
			0x55, 0x9f, 0x4c, 0x1e, 0x16, 0x18, 0xa6, 0xd3,
			0x5b, 0x91, 0x0d, 0x54, 0x31, 0x6e, 0xbf, 0x97,
		}
	)
	sig, err := ed25519.NewEcSignatureFromBytes(SIG)
	if err != nil {
		t.Fatal(err)
	}
	dkey := ed25519.NewPublicKeyFromBytes(PUB)
	ok, err := dkey.EcVerify(SIGNED, sig)
	if err != nil {
		t.Fatal(err)
	}
	if !ok {
		t.Fatal("EcDSA verify failed")
	}
}

package crypto

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"
)

var (
	sig_1 = []byte{
		0x0c, 0x27, 0xb3, 0xd4, 0xcb, 0xd7, 0x1c, 0x99,
		0xc3, 0x12, 0xa8, 0x16, 0x47, 0x30, 0x24, 0xcf,
		0x6a, 0x9c, 0xca, 0xb6, 0x93, 0xbb, 0x5f, 0xdb,
		0x1e, 0xf2, 0x8f, 0x2d, 0xec, 0x6d, 0x24, 0xb3,
		0xd0, 0xc0, 0x2b, 0x7d, 0xeb, 0x96, 0x4d, 0xaf,
		0xe4, 0x4c, 0x4b, 0xc0, 0xe0, 0x3e, 0x49, 0xf4,
		0x0d, 0x90, 0x5a, 0x97, 0xa1, 0x9d, 0x85, 0xd8,
		0x9f, 0x67, 0x76, 0xf4, 0x0c, 0x25, 0x46, 0x08,
	}

	msg_1 = []byte{
		0x00, 0x00, 0x00, 0x22,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x05, 0x70, 0xad, 0xe2, 0x8b, 0x6b, 0xa5,
		0x00, 0x00, 0x00, 0x0e,
		0x74, 0x63, 0x70, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0xac, 0x11, 0x00, 0x05,
		0x08, 0x26,
	}

	sig_2 = []byte{
		0x07, 0x7B, 0x81, 0xF9, 0xFC, 0x96, 0xA9, 0x64,
		0x0F, 0x44, 0xB0, 0xBE, 0x29, 0xEA, 0xBD, 0x5E,
		0x8D, 0xDE, 0xA5, 0x93, 0x78, 0xA8, 0x78, 0x73,
		0x0B, 0x69, 0xC6, 0x8C, 0x5F, 0x74, 0xC6, 0xD5,
		0x0E, 0xD0, 0x42, 0xA8, 0x48, 0xAA, 0x63, 0xC1,
		0x4F, 0xC7, 0xFB, 0x10, 0x1A, 0x54, 0x75, 0x36,
		0x15, 0x0B, 0x75, 0xCB, 0xEE, 0x1A, 0xCB, 0x7A,
		0x70, 0xF6, 0x26, 0x61, 0xF1, 0xC4, 0x8F, 0x33,
	}

	msg_2 = []byte{
		0x49, 0x20, 0x83, 0x5b, 0x92, 0xb4, 0x7d, 0x14,
		0x4e, 0x88, 0x96, 0x48, 0xa5, 0xba, 0x53, 0x39,
		0x42, 0xa7, 0x85, 0xb0, 0x66, 0x91, 0x43, 0x3f,
		0x2c, 0x59, 0x85, 0x0d, 0x9f, 0x3e, 0xb0, 0x08,
	}
)

func TestEdDSA(t *testing.T) {
	sigT, err := prv.Sign(msg_1)
	if err != nil {
		t.Fatal(err)
	}
	sigT.isEdDSA = true
	sigX := sigT.Bytes()
	if testing.Verbose() {
		fmt.Printf("SIG=%s\n", hex.EncodeToString(sigX))
	}
	// signature is deterministic, so we can check the computed signature
	if bytes.Compare(sigX, sig_1) != 0 {
		t.Logf("SIG! = %s\n", hex.EncodeToString(sig_1))
		t.Fatal("Signature mismatch")
	}
	rc, err := pub.Verify(msg_1, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed")
	}
}

func TestEcDSA(t *testing.T) {
	sigT, err := prv.SignLin(msg_2)
	if err != nil {
		t.Fatal(err)
	}
	rc, err := pub.VerifyLin(msg_2, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed (1)")
	}

	sigU, err := prv.SignLin(msg_2)
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(sigT.Bytes(), sigU.Bytes()) != 0 {
		t.Fatal("Signatures not deterministic")
	}

	sigT = NewSignatureFromBytes(sig_2)
	sigT.isEdDSA = false
	rc, err = pub.VerifyLin(msg_2, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed (2)")
	}
}

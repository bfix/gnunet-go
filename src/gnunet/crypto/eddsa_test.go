package crypto

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"gnunet/util"
)

var (
	seed = []byte{
		0x20, 0x3f, 0x2f, 0x8c, 0x54, 0xf4, 0x1a, 0xd3,
		0x01, 0x9a, 0x56, 0x92, 0x19, 0xda, 0xee, 0x4f,
		0xd2, 0x53, 0x55, 0xa6, 0x3c, 0xfc, 0x57, 0x40,
		0x8a, 0xb0, 0x86, 0x88, 0xf6, 0x86, 0xf4, 0x9c,
	}
	key = []byte{
		0x92, 0xDC, 0xBF, 0x39, 0x40, 0x2D, 0xC6, 0x3C,
		0x97, 0xA6, 0x81, 0xE0, 0xFC, 0xD8, 0x7C, 0x74,
		0x17, 0xD3, 0xA3, 0x8C, 0x52, 0xFD, 0xE0, 0x49,
		0xBC, 0xD0, 0x1C, 0x0A, 0x0B, 0x8C, 0x02, 0x51,
	}
	sig = [][]byte{
		[]byte{
			0x0c, 0x27, 0xb3, 0xd4, 0xcb, 0xd7, 0x1c, 0x99,
			0xc3, 0x12, 0xa8, 0x16, 0x47, 0x30, 0x24, 0xcf,
			0x6a, 0x9c, 0xca, 0xb6, 0x93, 0xbb, 0x5f, 0xdb,
			0x1e, 0xf2, 0x8f, 0x2d, 0xec, 0x6d, 0x24, 0xb3,
			0xd0, 0xc0, 0x2b, 0x7d, 0xeb, 0x96, 0x4d, 0xaf,
			0xe4, 0x4c, 0x4b, 0xc0, 0xe0, 0x3e, 0x49, 0xf4,
			0x0d, 0x90, 0x5a, 0x97, 0xa1, 0x9d, 0x85, 0xd8,
			0x9f, 0x67, 0x76, 0xf4, 0x0c, 0x25, 0x46, 0x08,
		},
		/*
			[]byte{
				0x2b, 0xcc, 0x12, 0x1a, 0x1e, 0x23, 0xfa, 0x51,
				0x30, 0xeb, 0x34, 0xb4, 0x02, 0x69, 0xd6, 0x49,
				0xd4, 0x43, 0x9a, 0x5d, 0xa1, 0x82, 0xa2, 0xac,
				0x38, 0xcb, 0xaf, 0xb3, 0xfa, 0x0c, 0xaf, 0x63,
				0x8b, 0x15, 0x46, 0x11, 0xd9, 0xdd, 0xa3, 0xf7,
				0x4d, 0xa2, 0x88, 0xec, 0x8f, 0x4c, 0xe1, 0x53,
				0x81, 0x36, 0x30, 0x7c, 0xdf, 0xf2, 0x84, 0x9f,
				0x8d, 0x58, 0x85, 0x0c, 0x12, 0xec, 0xdd, 0x05,
			},
		*/
	}
	data = [][]byte{
		[]byte{
			0x00, 0x00, 0x00, 0x22,
			0x00, 0x00, 0x00, 0x01,
			0x00, 0x05, 0x70, 0xad, 0xe2, 0x8b, 0x6b, 0xa5,
			0x00, 0x00, 0x00, 0x0e,
			0x74, 0x63, 0x70, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0xac, 0x11, 0x00, 0x05,
			0x08, 0x26,
		},
		/*
			[]byte{
				0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x10,
				0x00, 0x05, 0x70, 0xcd, 0x71, 0x45, 0x79, 0x99,
				0x00, 0x05, 0x70, 0xd7, 0x80, 0x31, 0x29, 0x9a,
				0x07, 0x60, 0x3e, 0xc8, 0x27, 0xc8, 0x77, 0xae,
				0x15, 0x8b, 0xa9, 0x56, 0xa6, 0x1f, 0x76, 0x51,
				0x43, 0xc1, 0x10, 0xaa, 0xb8, 0x23, 0x99, 0xd7,
				0xfc, 0x6c, 0x0c, 0x9b, 0x1c, 0xf7, 0xe6, 0xb2,
				0xd3, 0xb3, 0xac, 0xf3, 0x85, 0x0e, 0xcc, 0xdf,
				0x82, 0xdd, 0xfe, 0x45, 0x03, 0x08, 0x71, 0x8c,
				0x51, 0xaa, 0xe6, 0x52, 0xbf, 0xb6, 0x30, 0xe5,
				0x17, 0x13, 0x79, 0xdd, 0x01, 0xbc, 0x89, 0x56,
			},
		*/
	}
	prv *EdDSAPrivateKey
	pub *EdDSAPublicKey
)

func TestEdDSAPrvKey(t *testing.T) {

	prv = EdDSAPrivateKeyFromSeed(seed)
	if testing.Verbose() {
		prvB := prv.key[:32]
		fmt.Printf("PRIVATE = %s\n", hex.EncodeToString(prvB))
		fmt.Printf("        = '%s'\n", util.EncodeBinaryToString(prvB))
	}

	pub = prv.Public()
	pubB := pub.Bytes()
	if testing.Verbose() {
		fmt.Printf("PUBLIC  = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("        = '%s'\n", util.EncodeBinaryToString(pubB))
	}

	if !bytes.Equal(pubB, key) {
		fmt.Printf("PUBLIC_GOT = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("PUBLIC_EXP = %s\n", hex.EncodeToString(key))
		t.Fatal("Public key mismatch")
	}
}

func TestEdDSASign(t *testing.T) {
	for i := range data {
		sigT, err := prv.Sign(data[i])
		if err != nil {
			t.Fatal(err)
		}
		if testing.Verbose() {
			fmt.Printf("SIG(%d)=%s\n", i, hex.EncodeToString(sigT))
		}
		if bytes.Compare(sigT, sig[i]) != 0 {
			t.Fatal(fmt.Sprintf("Signature mismatch (%d)", i))
		}

		if !pub.Verify(data[i], sigT) {
			t.Fatal(fmt.Sprintf("Verify failed (%d)", i))
		}
	}
}

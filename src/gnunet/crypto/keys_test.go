package crypto

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"gnunet/util"
)

var (
	seed = []byte{
		0x20, 0x3f, 0x2f, 0x8c, 0x54, 0xf4, 0x1a, 0xd3,
		0x01, 0x9a, 0x56, 0x92, 0x19, 0xda, 0xee, 0x4f,
		0xd2, 0x53, 0x55, 0xa6, 0x3c, 0xfc, 0x57, 0x40,
		0x8a, 0xb0, 0x86, 0x88, 0xf6, 0x86, 0xf4, 0x9c,
	}

	q = []byte{
		0x92, 0xDC, 0xBF, 0x39, 0x40, 0x2D, 0xC6, 0x3C,
		0x97, 0xA6, 0x81, 0xE0, 0xFC, 0xD8, 0x7C, 0x74,
		0x17, 0xD3, 0xA3, 0x8C, 0x52, 0xFD, 0xE0, 0x49,
		0xBC, 0xD0, 0x1C, 0x0A, 0x0B, 0x8C, 0x02, 0x51,
	}

	sig = []byte{
		0x0c, 0x27, 0xb3, 0xd4, 0xcb, 0xd7, 0x1c, 0x99,
		0xc3, 0x12, 0xa8, 0x16, 0x47, 0x30, 0x24, 0xcf,
		0x6a, 0x9c, 0xca, 0xb6, 0x93, 0xbb, 0x5f, 0xdb,
		0x1e, 0xf2, 0x8f, 0x2d, 0xec, 0x6d, 0x24, 0xb3,
		0xd0, 0xc0, 0x2b, 0x7d, 0xeb, 0x96, 0x4d, 0xaf,
		0xe4, 0x4c, 0x4b, 0xc0, 0xe0, 0x3e, 0x49, 0xf4,
		0x0d, 0x90, 0x5a, 0x97, 0xa1, 0x9d, 0x85, 0xd8,
		0x9f, 0x67, 0x76, 0xf4, 0x0c, 0x25, 0x46, 0x08,
	}

	data = []byte{
		0x00, 0x00, 0x00, 0x22,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x05, 0x70, 0xad, 0xe2, 0x8b, 0x6b, 0xa5,
		0x00, 0x00, 0x00, 0x0e,
		0x74, 0x63, 0x70, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0xac, 0x11, 0x00, 0x05,
		0x08, 0x26,
	}

	prv *PrivateKey
	pub *PublicKey
)

func TestPrvKey(t *testing.T) {

	prv = PrivateKeyFromSeed(seed)
	if testing.Verbose() {
		fmt.Printf("PRIVATE (seed=%s)\n", hex.EncodeToString(seed))
		fmt.Printf("     d = %s\n", hex.EncodeToString(prv_1.D().Bytes()))
		fmt.Printf("    ID = '%s'\n", util.EncodeBinaryToString(seed))
	}

	pub = prv.Public()
	pubB := pub.Bytes()
	if testing.Verbose() {
		fmt.Printf("PUBLIC  = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("        = '%s'\n", util.EncodeBinaryToString(pubB))
	}

	if !bytes.Equal(pubB, q) {
		fmt.Printf("PUBLIC_GOT = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("PUBLIC_EXP = %s\n", hex.EncodeToString(q))
		t.Fatal("Public key mismatch")
	}
}

func TestSign(t *testing.T) {
	sigT, err := prv_1.Sign(data)
	if err != nil {
		t.Fatal(err)
	}
	sigX := sigT.Bytes()
	if testing.Verbose() {
		fmt.Printf("SIG=%s\n", hex.EncodeToString(sigX))
	}
	if bytes.Compare(sigX, sig) != 0 {
		t.Logf("SIG! = %s\n", hex.EncodeToString(sig))
		t.Fatal("Signature mismatch")
	}
	if !pub_1.Verify(data, sigT) {
		t.Fatal("Verify failed")
	}
}

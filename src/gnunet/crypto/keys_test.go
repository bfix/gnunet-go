package crypto

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"gnunet/util"
)

var (
	seed = []byte{
		0x20, 0x3f, 0x2f, 0x8c, 0x54, 0xf4, 0x1a, 0xd3,
		0x01, 0x9a, 0x56, 0x92, 0x19, 0xda, 0xee, 0x4f,
		0xd2, 0x53, 0x55, 0xa6, 0x3c, 0xfc, 0x57, 0x40,
		0x8a, 0xb0, 0x86, 0x88, 0xf6, 0x86, 0xf4, 0x9c,
	}

	q = []byte{
		0x92, 0xDC, 0xBF, 0x39, 0x40, 0x2D, 0xC6, 0x3C,
		0x97, 0xA6, 0x81, 0xE0, 0xFC, 0xD8, 0x7C, 0x74,
		0x17, 0xD3, 0xA3, 0x8C, 0x52, 0xFD, 0xE0, 0x49,
		0xBC, 0xD0, 0x1C, 0x0A, 0x0B, 0x8C, 0x02, 0x51,
	}

	prv = PrivateKeyFromSeed(seed)
	pub = prv.Public()
)

func TestPrvKey(t *testing.T) {

	if testing.Verbose() {
		fmt.Printf("PRIVATE (seed=%s)\n", hex.EncodeToString(seed))
		fmt.Printf("     d = %s\n", hex.EncodeToString(prv_1.D().Bytes()))
		fmt.Printf("    ID = '%s'\n", util.EncodeBinaryToString(seed))
	}

	pubB := pub.Bytes()
	if testing.Verbose() {
		fmt.Printf("PUBLIC  = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("        = '%s'\n", util.EncodeBinaryToString(pubB))
	}

	if !bytes.Equal(pubB, q) {
		fmt.Printf("PUBLIC(computed) = %s\n", hex.EncodeToString(pubB))
		fmt.Printf("PUBLIC(expected) = %s\n", hex.EncodeToString(q))
		t.Fatal("Public key mismatch")
	}
}

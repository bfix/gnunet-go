package crypto

import (
	"bytes"
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	"testing"

	"gnunet/crypto/hkdf"
)

func TestHKDF_gnunet(t *testing.T) {

	var (
		// Ed25519 public key (binary representation)
		pub = []byte{
			0x92, 0xDC, 0xBF, 0x39, 0x40, 0x2D, 0xC6, 0x3C,
			0x97, 0xA6, 0x81, 0xE0, 0xFC, 0xD8, 0x7C, 0x74,
			0x17, 0xD3, 0xA3, 0x8C, 0x52, 0xFD, 0xE0, 0x49,
			0xBC, 0xD0, 0x1C, 0x0A, 0x0B, 0x8C, 0x02, 0x51,
		}
		// SALT as defined in GNUnet
		salt = []byte("key-derivation")
		// expected PRK (as dumped in GNUnet)
		PRK = []byte{
			0x28, 0x18, 0x2F, 0x86, 0xB4, 0x09, 0x34, 0x63,
			0x9E, 0xC2, 0x3A, 0xA3, 0xF7, 0x9C, 0xCB, 0x78,
			0x17, 0xC9, 0xD4, 0x00, 0xF7, 0x20, 0x8D, 0xA0,
			0x44, 0xAF, 0x37, 0xD6, 0xE3, 0xA0, 0x1B, 0xFA,
			0x2A, 0x02, 0xC7, 0x8D, 0x86, 0xC7, 0x81, 0xED,
			0x0F, 0xB9, 0xF2, 0xAE, 0xEF, 0xB1, 0x4C, 0x15,
			0x2D, 0x51, 0x7E, 0x68, 0xD1, 0x2E, 0x6D, 0x05,
			0x26, 0x3F, 0x8B, 0xEB, 0x63, 0x4C, 0xBF, 0x9D,
		}
	)
	prk := hkdf.Extract(sha512.New, pub, salt)
	fmt.Println("PRK(computed) = " + hex.EncodeToString(prk))
	if bytes.Compare(prk, PRK) != 0 {
		fmt.Println("PRK(expected) = " + hex.EncodeToString(PRK))
		t.Fatal("PRK mismatch")
	}
}

func TestHDKF(t *testing.T) {
	var (
		ikm = []byte{
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		}
		salt = []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c,
		}
		PRK = []byte{
			0x66, 0x57, 0x99, 0x82, 0x37, 0x37, 0xde, 0xd0,
			0x4a, 0x88, 0xe4, 0x7e, 0x54, 0xa5, 0x89, 0x0b,
			0xb2, 0xc3, 0xd2, 0x47, 0xc7, 0xa4, 0x25, 0x4a,
			0x8e, 0x61, 0x35, 0x07, 0x23, 0x59, 0x0a, 0x26,
			0xc3, 0x62, 0x38, 0x12, 0x7d, 0x86, 0x61, 0xb8,
			0x8c, 0xf8, 0x0e, 0xf8, 0x02, 0xd5, 0x7e, 0x2f,
			0x7c, 0xeb, 0xcf, 0x1e, 0x00, 0xe0, 0x83, 0x84,
			0x8b, 0xe1, 0x99, 0x29, 0xc6, 0x1b, 0x42, 0x37,
		}
		info = []byte{
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
		}
		L   = 42
		OKM = []byte{
			0x83, 0x23, 0x90, 0x08, 0x6c, 0xda, 0x71, 0xfb,
			0x47, 0x62, 0x5b, 0xb5, 0xce, 0xb1, 0x68, 0xe4,
			0xc8, 0xe2, 0x6a, 0x1a, 0x16, 0xed, 0x34, 0xd9,
			0xfc, 0x7f, 0xe9, 0x2c, 0x14, 0x81, 0x57, 0x93,
			0x38, 0xda, 0x36, 0x2c, 0xb8, 0xd9, 0xf9, 0x25,
			0xd7, 0xcb,
		}
	)

	prk := hkdf.Extract(sha512.New, ikm, salt)
	fmt.Println("PRK(computed) = " + hex.EncodeToString(prk))
	if bytes.Compare(prk, PRK) != 0 {
		fmt.Println("PRK(expected) = " + hex.EncodeToString(PRK))
		t.Fatal("PRK mismatch")
	}

	rdr := hkdf.Expand(sha512.New, prk, info)
	okm := make([]byte, L)
	rdr.Read(okm)
	fmt.Println("OKM(computed) = " + hex.EncodeToString(okm))
	if bytes.Compare(okm, OKM) != 0 {
		fmt.Println("OKM(expected) = " + hex.EncodeToString(OKM))
		t.Fatal("OKM mismatch")
	}
}
